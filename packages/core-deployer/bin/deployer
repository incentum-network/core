#!/usr/bin/env node

'use strict'

const commander = require('commander')
const Joi = require('joi')
const fs = require('fs')
const os = require('os')
const path = require('path')
const { logger, updateConfig } = require('../lib/utils')

commander
  .version(require('../package.json').version)
  .option('-h, --help', 'help', false)
  .option('--network <value>', 'Network to initially copy', 'mainnet')
  .option('--name <value>', 'Name', 'Bridgechain')
  .option('--p2pPort <value>', 'P2P API Port', 4202)
  .option('--pubPort <value>', 'Public P2P Port', 4203)
  .option('--dbHost <value>', 'Database host', 'localhost')
  .option('--dbPort <value>', 'Database port', 5432)
  .option('--dbUsername <value>', 'Database username', 'node')
  .option('--dbPassword <value>', 'Database password', 'password')
  .option('--dbDatabase <value>', 'Database name', `ark_${commander.name}`)
  .option('--nodeIp <value>', 'IP for node', '0.0.0.0')
  .option('--nodePort <value>', 'Port for node', 4100)
  .option('--activeDelegates <value>', 'How many forgers for the network [51]', 51)
  .option('--feeSend <value>', 'Fee for sending Transaction', 10000000)
  .option('--feeVote <value>', 'Fee for Vote Transaction', 100000000)
  .option('--feeSecondSignature <value>', 'Fee for Second Passphrase Transaction', 500000000)
  .option('--feeDelegate <value>', 'Fee for Register Delegate Transaction', 2500000000)
  .option('--feeMultisignature <value>', 'Fee for Multisignature Transaction', 500000000)
  .option('--epoch <value>', 'Set Epoch based on time the chain was created', '2017-02-21T13:00:00.000Z')
  .option('--rewardHeight <value>', 'Block Height when Forgers receive Rewards [1]', 1)
  .option('--rewardPerBlock <value>', 'How many Rewarded Tokens per Forged Block [200000000 (2)]', 200000000)
  .option('--blocktime <value>', 'Time per block (seconds) [8]', 8)
  .option('--token <value>', 'Token Name [CHAIN]', 'CHAIN')
  .option('--symbol <value>', 'Symbol for Token [C]', 'C')
  .option('--prefixHash <value>', 'Address Prefix Hash [28]', '28')
  .option('--transactionsPerBlock <value>', 'Max Transaction count per Block [50]', 50)
  // .option('--max-votes', 'Max Votes per Wallet [1]')
  .option('--totalPremine <value>', 'How many tokens initially added to genesis account [2100000000000000 (21 million)]', 2100000000000000)
  // .option('--max-tokens-per-account', 'Max amount of tokens per account [12500000000000000 (125 million)]')
  .parse(process.argv)

const schema = Joi.object().keys({
  network: Joi.string().required(),
  name: Joi.string().required(),
  p2pPort: Joi.number().required(),
  pubPort: Joi.number().required(),
  dbHost: Joi.string().required(),
  dbPort: Joi.number().required(),
  dbUsername: Joi.string().required(),
  dbPassword: Joi.string().required(),
  dbDatabase: Joi.string().required(),
  nodeIp: Joi.string().required(),
  nodePort: Joi.number().required(),
  activeDelegates: Joi.number().required(),
  feeSend: Joi.number().required(),
  feeVote: Joi.number().required(),
  feeSecondSignature: Joi.number().required(),
  feeDelegate: Joi.number().required(),
  feeMultisignature: Joi.number().required(),
  epoch: Joi.string().regex(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/).required(),
  rewardHeight: Joi.number().min(1).required(),
  rewardPerBlock: Joi.number().required(),
  blocktime: Joi.number().required(),
  token: Joi.string().required(),
  symbol: Joi.string().required(),
  prefixHash: Joi.number().required(),
  transactionsPerBlock: Joi.number().required(),
  totalPremine: Joi.number().required()
})

const { error, value } = Joi.validate(commander, schema, { allowUnknown: true })

if (error) {
  error.details.forEach(detail => {
    logger.error(detail.message)
  })
  process.exit(1)
}

if (!commander.help) {
  commander.outputHelp();
}

process.env.ARK_PATH_CONFIG = path.resolve(os.homedir(), '.ark')

if (!fs.existsSync(process.env.ARK_PATH_CONFIG)) {
  fs.copy(`./config/${commander.network}`, process.env.ARK_PATH_CONFIG)
}

const networkConfig = {
  name: commander.name.toLowerCase(),
  messagePrefix: `${commander.token} message:\n`,
  pubKeyHash: commander.prefixHash,
  // nethash: commander.nethash, TODO
  // wif: wif, TODO
  'constants[0].blocktime': commander.blocktime,
  'constants[0].block.maxTransactions': commander.transactionsPerBlock,
  'constants[0].epoch': commander.epoch,
  'constants[0].activeDelegates': commander.activeDelegates,
  'constants[0].fees.send': commander.feeSend,
  'constants[0].fees.vote': commander.feeVote,
  'constants[0].fees.secondsignature': commander.feeSecondSignature,
  'constants[0].fees.delegate': commander.feeDelegate,
  'constants[0].fees.multisignature': commander.feeMultisignature,
  'client.token': commander.token,
  'client.symbol': commander.symbol
  // 'client.explorer': commander.explorerUrl, TODO
}

if (commander.rewardHeight === 1) {
  networkConfig['constants[0].height'] = commander.rewardHeight
  networkConfig['constants[0].reward'] = commander.rewardPerBlock
  delete networkConfig.constants[1]
} else {
  networkConfig['constants[1].height'] = commander.rewardHeight
  networkConfig['constants[1].reward'] = commander.rewardPerBlock
}

updateConfig('network', networkConfig)

updateConfig('server', {
  port: commander.p2pPort,
  'database.options.uri': `postgres://${commander.dbUsername}:${commander.dbPassword}@${commander.dbHost}:${commander.dbPort}/${commander.dbDatabase}`,
  'database.options.dialect': 'postgres'
})

updateConfig('api/public', { port: commander.pubPort })
