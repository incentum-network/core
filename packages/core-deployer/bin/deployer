#!/usr/bin/env node

'use strict'

const commander = require('commander')
const Joi = require('joi')
const fs = require('fs-extra')
const os = require('os')
const path = require('path')
const { getRandomNumber, logger, updateConfig } = require('../lib/utils')
const genesisBlockBuilder = require('../lib/builder/genesis-block')

commander
  .version(require('../package.json').version)
  .option('-h, --help', 'help', false)
  .option('--network <value>', 'Network to initially copy', 'mainnet')
  .option('--name <value>', 'Name', 'Bridgechain')
  .option('--nodeIp <value>', 'IP for node', '0.0.0.0')
  .option('--p2pPort <value>', 'P2P API Port', 4102)
  .option('--apiPort <value>', 'Public P2P Port', 4103)
  .option('--dbHost <value>', 'Database host', 'localhost')
  .option('--dbPort <value>', 'Database port', 5432)
  .option('--dbUsername <value>', 'Database username', 'node')
  .option('--dbPassword <value>', 'Database password', 'password')
  .option('--dbDatabase <value>', 'Database name', `ark_${commander.name}`)
  .option('--explorerUrl <value>', 'URL to link to explorer', 'http://localhost:4200')
  .option('--activeDelegates <value>', 'How many forgers for the network [51]', 51)
  .option('--feeSend <value>', 'Fee for sending Transaction', 10000000)
  .option('--feeVote <value>', 'Fee for Vote Transaction', 100000000)
  .option('--feeSecondSignature <value>', 'Fee for Second Passphrase Transaction', 500000000)
  .option('--feeDelegate <value>', 'Fee for Register Delegate Transaction', 2500000000)
  .option('--feeMultisignature <value>', 'Fee for Multisignature Transaction', 500000000)
  .option('--epoch <value>', 'Set Epoch based on time the chain was created', '2017-02-21T13:00:00.000Z')
  .option('--rewardHeight <value>', 'Block Height when Forgers receive Rewards [1]', 1)
  .option('--rewardPerBlock <value>', 'How many Rewarded Tokens per Forged Block [200000000 (2)]', 200000000)
  .option('--blocktime <value>', 'Time per block (seconds) [8]', 8)
  .option('--token <value>', 'Token Name [CHAIN]', 'CHAIN')
  .option('--symbol <value>', 'Symbol for Token [C]', 'C')
  .option('--prefixHash <value>', 'Address Prefix Hash [28]', 28)
  .option('--transactionsPerBlock <value>', 'Max Transaction count per Block [50]', 50)
  .option('--wifPrefix <value>', 'Prefix for generating a WIF [rand(1, 255)]', getRandomNumber(1, 255))
  // .option('--max-votes', 'Max Votes per Wallet [1]')
  .option('--totalPremine <value>', 'How many tokens initially added to genesis account [2100000000000000 (21 million)]', 2100000000000000)
  // .option('--max-tokens-per-account', 'Max amount of tokens per account [12500000000000000 (125 million)]')
  .parse(process.argv)

const { error, value } = Joi.validate(commander, require('../lib/schema.js'), { allowUnknown: true })

if (error) {
  error.details.forEach(detail => logger.error(detail.message))
  process.exit(1)
}

if (!commander.help) {
  commander.outputHelp();
}

process.env.ARK_PATH_CONFIG = path.resolve(os.homedir(), '.ark')

if (!fs.existsSync(`${process.env.ARK_PATH_CONFIG}/deployer`)) {
  fs.copySync(`../core-config/lib/networks/${commander.network}`, `${process.env.ARK_PATH_CONFIG}/deployer`)
}

let networkConfig = {
  name: commander.name.toLowerCase(),
  messagePrefix: `${commander.token} message:\n`,
  pubKeyHash: commander.prefixHash,
  wif: commander.wifPrefix,
  'constants[0].blocktime': commander.blocktime,
  'constants[0].block.maxTransactions': commander.transactionsPerBlock,
  'constants[0].epoch': commander.epoch,
  'constants[0].activeDelegates': commander.activeDelegates,
  'constants[0].fees.send': commander.feeSend,
  'constants[0].fees.vote': commander.feeVote,
  'constants[0].fees.secondsignature': commander.feeSecondSignature,
  'constants[0].fees.delegate': commander.feeDelegate,
  'constants[0].fees.multisignature': commander.feeMultisignature,
  'client.token': commander.token,
  'client.symbol': commander.symbol,
  'client.explorer': commander.explorerUrl,
  exceptions: {}
}

const network = updateConfig('network', networkConfig)

const genesis = (new genesisBlockBuilder(network, commander)).generate()

network.nethash = genesis.genesisBlock.payloadHash

if (commander.rewardHeight === 1) {
  network.constants[0].height = commander.rewardHeight
  network.constants[0].reward = commander.rewardPerBlock
  delete network.constants[1]
} else {
  network.constants[1].height = commander.rewardHeight
  network.constants[1].reward = commander.rewardPerBlock
}

updateConfig('network', networkConfig)

updateConfig('genesisWallet', {
  address: genesis.genesisWallet.address,
  passphrase: genesis.genesisWallet.passphrase
}, true)
updateConfig('genesisBlock', genesis.genesisBlock, true)
updateConfig('delegates', {secrets: genesis.delegatePassphrases}, true)

updateConfig('server', {
  port: commander.p2pPort,
  'database.options.uri': `postgres://${commander.dbUsername}:${commander.dbPassword}@${commander.dbHost}:${commander.dbPort}/${commander.dbDatabase}`,
  'database.options.dialect': 'postgres'
})

updateConfig('api/public', { port: commander.apiPort })
